#define _CRT_SECURE_NO_DEPRECATE			//error C4996: 'scanf': This function or variable may be unsafe.

#include<stdio.h>
#include<windows.h>
#include<time.h>
#include<stdlib.h>
#include<malloc.h>
#include<math.h>

struct IDA{
	struct Node * data;
	struct IDA * parent;
	struct IDA * next;//指针域
}*head,*headRBFS;

struct Node{
	int state[9];
	int depth;
	char action;
	int disp;
};
//struct Node *start=(struct Node* )malloc(sizeof(struct Node));

int start[9]={1,2,3,4,5,6,7,8,0};



/*void init()
{
	head=(struct IDA*)malloc(sizeof(struct IDA));
}*/

void swap(int *p,int *q)
{
	int temp;
	temp=*p;
	*p=*q;
	*q=temp;
}

int find_0(int array[])
{
	int i;
	for(i=0;i<9;i++)
		if(array[i]==0)
			return i;
	printf("Fatal Error!!!\n");
	exit(-9999);
}


struct IDA* move_up(int array[],int a)
{
	int i,arr[9];
	struct IDA *p;
	for(i=0;i<9;i++)
		arr[i]=array[i];
	if(find_0(arr)==0 || find_0(arr)==1 || find_0(arr)==2)
		return NULL;
	if(a==1)
		swap(&array[find_0(array)],&array[find_0(array)-3]);
	else
		swap(&arr[find_0(arr)],&arr[find_0(arr)-3]);
	p=(struct IDA* )malloc(sizeof(struct IDA));
	p->next=NULL;
	p->parent=NULL;
	p->data=(struct Node* )malloc(sizeof(struct Node));
	p->data->depth=0;
	for(i=0;i<9;i++)
		p->data->state[i]=arr[i];
	return p;
}

struct IDA* move_down(int array[],int a)
{
	int i,arr[9];
	struct IDA *p;
	for(i=0;i<9;i++)
		arr[i]=array[i];
	if(find_0(arr)==6 || find_0(arr)==7 || find_0(arr)==8)
		return NULL;
	if(a==1)
		swap(&array[find_0(array)],&array[find_0(array)+3]);
	else
		swap(&arr[find_0(arr)],&arr[find_0(arr)+3]);
	p=(struct IDA* )malloc(sizeof(struct IDA));
	p->next=NULL;
	p->parent=NULL;
	p->data=(struct Node* )malloc(sizeof(struct Node));
	p->data->depth=0;
	for(i=0;i<9;i++)
		p->data->state[i]=arr[i];
	return p;
}

struct IDA* move_left(int array[],int a)
{
	int i,arr[9];
	struct IDA *p;
	for(i=0;i<9;i++)
		arr[i]=array[i];
	if(find_0(arr)==0 || find_0(arr)==3 || find_0(arr)==6)
		return NULL;
	if(a==1)
		swap(&array[find_0(array)],&array[find_0(array)-1]);
	else
		swap(&arr[find_0(arr)],&arr[find_0(arr)-1]);
	
	p=(struct IDA* )malloc(sizeof(struct IDA));
	p->next=NULL;
	p->parent=NULL;
	p->data=(struct Node* )malloc(sizeof(struct Node));
	p->data->depth=0;
	for(i=0;i<9;i++)
		p->data->state[i]=arr[i];
	return p;
}

struct IDA* move_right(int array[],int a)
{
	int i,arr[9];
	struct IDA *p;
	for(i=0;i<9;i++)
		arr[i]=array[i];
	if(find_0(arr)==2 || find_0(arr)==5 || find_0(arr)==8)
		return NULL;
	if(a==1)
		swap(&array[find_0(array)],&array[find_0(array)+1]);
	else
		swap(&arr[find_0(arr)],&arr[find_0(arr)+1]);
	p=(struct IDA* )malloc(sizeof(struct IDA));
	p->next=NULL;
	p->parent=NULL;
	p->data=(struct Node* )malloc(sizeof(struct Node));
	p->data->depth=0;
	for(i=0;i<9;i++)
		p->data->state[i]=arr[i];
	return p;
}

int* randep(int d)
{
	
	start[0]=1;start[1]=2;start[2]=3;start[3]=4;start[4]=5;start[5]=6;start[6]=7;start[7]=8;start[8]=0;
	int i,n,*q;
	struct IDA *p;
	srand((unsigned)time(NULL));
	for(i=d;i>0;i--)
	{
		n=rand()%4;
		//printf("%d\n",n);
		switch(n)
		{
			case 0:	if((p=move_up(start,1))==NULL)
					{	
						i++;
						continue;
					}
					else 
					{
						free(p->data);
						free(p);
					}
					break;
			case 1:	if((p=move_down(start,1))==NULL)
					{	
						i++;
						continue;
					}
					else 
					{
						free(p->data);
						free(p);
					}
					break;
			case 2:	if((p=move_left(start,1))==NULL)
					{	
						i++;
						continue;
					}
					else 
					{
						free(p->data);
						free(p);
					}
					break;
			case 3:	if((p=move_right(start,1))==NULL)
					{	
						i++;
						continue;
					}
					else 
					{
						free(p->data);
						free(p);
					}
					break;
		}

	}
	printf("%d %d %d\n%d %d %d\n%d %d %d\n",start[0],start[1],start[2],start[3],start[4],start[5],start[6],start[7],start[8]);
	return q=start;
}

/*int Manhattan(int i,int j)
{
	s[0]=squad[0][0];s[3]=squad[0][1];s[6]=squad[0][2];
	s[1]=squad[1][0];s[4]=squad[1][1];s[7]=squad[1][2];
	s[2]=squad[2][0];s[5]=squad[2][1];s[8]=squad[2][2];
}*/

void add(struct IDA* h,struct IDA* a)
{
	if(h==NULL)
	{
		head=a;
		//a->data->depth=1;
		a->next=NULL;
		a->parent=NULL;
		return;
	}
	head=a;
	a->next=h;
	//a->parent=NULL;
	//h->parent=a;
	//a->data->depth=h->data->depth+1;
	return;
}

char* showroute(struct IDA* s)
{
	char ans[40],answer[40];
	struct IDA* p;
	int i,j,k;
	p=s;
	for(i=0;i<40;i++)
	{
		ans[i]=p->data->action;
		p=p->parent;
		//printf("%c",ans[i]);
		if(p->parent==NULL)
			break;
	}
	printf("\n");

	for(j=0;j<i;j++)
	{
		if(ans[j]=='r' && ans[j+1]=='l')
			ans[j]=ans[j+1]=0;
		if(ans[j]=='l' && ans[j+1]=='r')
			ans[j]=ans[j+1]=0;
		if(ans[j]=='u' && ans[j+1]=='d')
			ans[j]=ans[j+1]=0;
		if(ans[j]=='d' && ans[j+1]=='u')
			ans[j]=ans[j+1]=0; 
	}

	for(j=0;i!=-1;i--)
		if(ans[i]!='\0')
		{
			answer[j]=ans[i];
			j++;
		}
	answer[j]='\0';
	return answer;
}


int whetherGoal(struct Node* array,int ans[])
{
	if(array->state[0]==ans[0] && array->state[1]==ans[1] && array->state[2]==ans[2] && array->state[3]==ans[3] && array->state[4]==ans[4] && array->state[5]==ans[5] && array->state[6]==ans[6] && array->state[7]==ans[7] && array->state[8]==ans[8])
		return 1;
	else return -1;
}


int d(struct Node* s)
{
	int i,j,t,count=0,a[9]={1,2,3,4,5,6,7,8,0};
	for(i=1;i<9;i++)
	{
		for(j=0;j<9;j++)
			if(s->state[j] == i)
				break;

		t=j - i+1;
		t=abs(t);
		count=t%3+t/3+count;
	}
	return count+ s->depth;
}


char* ida(int pa[],int ans[])
{
	int d_limit=0,next_d_limit;
	char * answer;
	struct IDA *s=(struct IDA* )malloc(sizeof ( IDA) ),*list,*newstates;
	struct Node *s0=(struct Node* )malloc(sizeof(Node));
	//s->data=ss;
	s->data=(struct Node* )malloc(sizeof(Node));
	s->next=NULL;
	s->parent=NULL;
	/*list->data=(struct Node* )malloc(sizeof(Node));
	list->parent=NULL;
	list->next=NULL;
	list->data->depth=0;*/
	s0->depth=0;
	s->data->depth=0;
	for(int i=0;i<9;i++)
		s0->state[i]=pa[i];
	d_limit=d(s0);
	while(d_limit<9999)
	{
		next_d_limit=9999;

		list=(struct IDA* )malloc(sizeof(IDA));
		list->data=(struct Node* )malloc(sizeof(Node));
		list->parent=NULL;
		list->next=NULL;
		list->data->depth=0;
		head=list;

		for(int i=0;i<9;i++)
			list->data->state[i]=s0->state[i];
		while(list!=NULL)
		{
			s=head;
			head=list=list->next;
			if(d(s->data)>d_limit)
				next_d_limit=min(next_d_limit,d(s->data));
			else 
				{
					if(whetherGoal(s->data,ans)>0)
					{
						answer=showroute(s);
						return answer;
						//return showroute(s);				//showroute(s)结果是对的，但是再次返回就出现错误
					}
					if((newstates=move_up(s->data->state,2))!=NULL)	//apply action to s;prepend(newstates,list);
					{
						newstates->data->action='u';
						newstates->data->depth=s->data->depth+1;
						newstates->parent=s;
						add(list,newstates);
						list=head;
					}
					if((newstates=move_down(s->data->state,2))!=NULL)
					{
						newstates->data->action='d';
						newstates->data->depth=s->data->depth+1;
						newstates->parent=s;
						add(list,newstates);
						list=head;
					}
					if((newstates=move_left(s->data->state,2))!=NULL)
					{
						newstates->data->action='l';
						newstates->data->depth=s->data->depth+1;
						newstates->parent=s;
						add(list,newstates);
						list=head;
					}
					if((newstates=move_right(s->data->state,2))!=NULL)
					{
						newstates->data->action='r';
						newstates->data->depth=s->data->depth+1;
						newstates->parent=s;
						add(list,newstates);
						list=head;
					}
			}
		}
		d_limit=next_d_limit;
	}
	return NULL;
}

void backAdd(struct IDA* h,struct IDA* a)
{
	struct IDA* p;
	p=h;
	if(h==NULL)
		return;
	while(p->next!=NULL)
		p=p->next;
	p->next=a;
	return;
}
struct IDA* rbfs_r(struct IDA* st,int f_limit,int &fbest,int goal[])
{
	if(whetherGoal(st->data,goal)>0)
		return st;
	struct IDA* successor=NULL,*s,*best,*result,*newstate;
	int alter;
	//expand successors
	int * t;
	if( st->data->action!='u' && (newstate=move_up(st->data->state,2))!=NULL)
	{
		newstate->data->action='u';
		newstate->data->depth=st->data->depth+1;
		newstate->data->disp=d(newstate->data);
		newstate->parent=st;
		if(successor==NULL)
			successor=newstate;
		else 
			backAdd(successor, newstate);
	}
	if( st->data->action!='d' && (newstate=move_down(st->data->state,2))!=NULL)
	{
		newstate->data->action='d';
		newstate->data->depth=st->data->depth+1;
		newstate->data->disp=d(newstate->data);
		newstate->parent=st;
		if(successor==NULL)
			successor=newstate;
		else 
			backAdd(successor, newstate);
	}
	if( st->data->action!='l' && (newstate=move_left(st->data->state,2))!=NULL)
	{
		newstate->data->action='l';
		newstate->data->depth=st->data->depth+1;
		newstate->data->disp=d(newstate->data);
		newstate->parent=st;
		if(successor==NULL)
			successor=newstate;
		else 
			backAdd(successor, newstate);
	}
	if( st->data->action!='r' && (newstate=move_right(st->data->state,2))!=NULL)
	{
		newstate->data->action='r';
		newstate->data->depth=st->data->depth+1;
		newstate->data->disp=d(newstate->data);
		newstate->parent=st;
		if(successor==NULL)
			successor=newstate;
		else 
			backAdd(successor, newstate);
	}
	/*if( st->act!=l && (t=moveright(st->p))!=NULL)
		successor=createState(t,st->num_of_step+1   ,r,successor,st);*/

	for(s=successor;s!=NULL;s=s->next)
	{
		if(s->data->disp<st->data->disp)
			s->data->disp=st->data->disp;
	}

	while(1)
	{
		best=successor;
		for(s=successor;s!=NULL;s=s->next)
		{
			if(s->data->disp<best->data->disp)
				best=s;
		}
		if(best->data->disp>f_limit)
		{
			fbest=best->data->disp;
			return NULL;
		}
		alter=0x7FFFFFFF;
		for(s=successor;s!=NULL;s=s->next)
		{
			if(s==best)
				continue;
			else if(s->data->disp < alter)
				alter=s->data->disp;
		}

		result=rbfs_r(best, (f_limit<alter)?f_limit:alter, best->data->disp,goal);
		if(result!=NULL)
			return result;
	}
}

char * rbfs(int init[],int goal[])//递归最佳优先算法
{
	struct IDA* puzzle=(struct IDA*)malloc(sizeof(struct IDA)),*final=(struct IDA*)malloc(sizeof(struct IDA));
	puzzle->data=(struct Node*)malloc(sizeof(struct Node));
	char *answer;
	headRBFS=puzzle;
	puzzle->data->depth=1;
	puzzle->parent=NULL;
	puzzle->next=NULL;
	for(int i=0;i<9;i++)
		puzzle->data->state[i]=init[i];
	puzzle->data->disp=d(puzzle->data);

	final=rbfs_r(puzzle,10000,puzzle->data->disp,goal);

	answer=showroute(final);
	return answer;
}


int main()
{
	int i,n;
	int *arr;
	int last[9]={1,2,3,4,5,6,7,8,0};
	char *ans1,*ans2;
	ans1=(char *)malloc(40*sizeof(char));
	ans2=(char *)malloc(40*sizeof(char));
	//int aa[9]={4,5,1,8,7,3,2,0,6};
	//int aa[9]={4,3,6,7,1,0,5,2,8};
	//int aa[9]={5,3,4,6,0,2,8,7,1};				//这个跑不了。。。
	//int aa[9]={1,7,5,3,0,4,6,2,8};				//这个跑不了。。。
	struct Node *q;
	printf("Enter the steps you want:\n");
	scanf("%d",&n);
	arr=randep(n);
	printf("choose an agorithm:\n1.IDA*\n2.RBFS\n");
	scanf("%d",&i);
	switch(i)
	{
		case 1:	ans1=ida(arr,last);
				printf("%s\n",ans1);
				break;
		case 2:	ans2=rbfs(arr,last);
				printf("%s\n",ans2);
				break;
		default:break;
	}

	//ans1=ida(arr,last);
	//ans2=rbfs(arr,last);


	//printf("%d %d %d\n%d %d %d\n%d %d %d\n",aa[0],aa[1],aa[2],aa[3],aa[4],aa[5],aa[6],aa[7],aa[8]);
	printf("%d %d %d\n%d %d %d\n%d %d %d\n",last[0],last[1],last[2],last[3],last[4],last[5],last[6],last[7],last[8]);


	//printf("%s\n",ans1);
	//printf("\n%s\n",ans2);
	system("pause");
	return 1;
}
